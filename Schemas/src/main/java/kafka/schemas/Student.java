/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package kafka.schemas;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Student extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Student\",\"namespace\":\"kafka.schemas\",\"fields\":[{\"name\":\"firstname\",\"type\":\"string\"},{\"name\":\"lastname\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"section\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence firstname;
  @Deprecated public java.lang.CharSequence lastname;
  @Deprecated public int age;
  @Deprecated public java.lang.CharSequence section;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Student() {}

  /**
   * All-args constructor.
   */
  public Student(java.lang.CharSequence firstname, java.lang.CharSequence lastname, java.lang.Integer age, java.lang.CharSequence section) {
    this.firstname = firstname;
    this.lastname = lastname;
    this.age = age;
    this.section = section;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return firstname;
    case 1: return lastname;
    case 2: return age;
    case 3: return section;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: firstname = (java.lang.CharSequence)value$; break;
    case 1: lastname = (java.lang.CharSequence)value$; break;
    case 2: age = (java.lang.Integer)value$; break;
    case 3: section = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'firstname' field.
   */
  public java.lang.CharSequence getFirstname() {
    return firstname;
  }

  /**
   * Sets the value of the 'firstname' field.
   * @param value the value to set.
   */
  public void setFirstname(java.lang.CharSequence value) {
    this.firstname = value;
  }

  /**
   * Gets the value of the 'lastname' field.
   */
  public java.lang.CharSequence getLastname() {
    return lastname;
  }

  /**
   * Sets the value of the 'lastname' field.
   * @param value the value to set.
   */
  public void setLastname(java.lang.CharSequence value) {
    this.lastname = value;
  }

  /**
   * Gets the value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'section' field.
   */
  public java.lang.CharSequence getSection() {
    return section;
  }

  /**
   * Sets the value of the 'section' field.
   * @param value the value to set.
   */
  public void setSection(java.lang.CharSequence value) {
    this.section = value;
  }

  /** Creates a new Student RecordBuilder */
  public static kafka.schemas.Student.Builder newBuilder() {
    return new kafka.schemas.Student.Builder();
  }
  
  /** Creates a new Student RecordBuilder by copying an existing Builder */
  public static kafka.schemas.Student.Builder newBuilder(kafka.schemas.Student.Builder other) {
    return new kafka.schemas.Student.Builder(other);
  }
  
  /** Creates a new Student RecordBuilder by copying an existing Student instance */
  public static kafka.schemas.Student.Builder newBuilder(kafka.schemas.Student other) {
    return new kafka.schemas.Student.Builder(other);
  }
  
  /**
   * RecordBuilder for Student instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Student>
    implements org.apache.avro.data.RecordBuilder<Student> {

    private java.lang.CharSequence firstname;
    private java.lang.CharSequence lastname;
    private int age;
    private java.lang.CharSequence section;

    /** Creates a new Builder */
    private Builder() {
      super(kafka.schemas.Student.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(kafka.schemas.Student.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.firstname)) {
        this.firstname = data().deepCopy(fields()[0].schema(), other.firstname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastname)) {
        this.lastname = data().deepCopy(fields()[1].schema(), other.lastname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.section)) {
        this.section = data().deepCopy(fields()[3].schema(), other.section);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Student instance */
    private Builder(kafka.schemas.Student other) {
            super(kafka.schemas.Student.SCHEMA$);
      if (isValidValue(fields()[0], other.firstname)) {
        this.firstname = data().deepCopy(fields()[0].schema(), other.firstname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastname)) {
        this.lastname = data().deepCopy(fields()[1].schema(), other.lastname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.section)) {
        this.section = data().deepCopy(fields()[3].schema(), other.section);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'firstname' field */
    public java.lang.CharSequence getFirstname() {
      return firstname;
    }
    
    /** Sets the value of the 'firstname' field */
    public kafka.schemas.Student.Builder setFirstname(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.firstname = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'firstname' field has been set */
    public boolean hasFirstname() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'firstname' field */
    public kafka.schemas.Student.Builder clearFirstname() {
      firstname = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'lastname' field */
    public java.lang.CharSequence getLastname() {
      return lastname;
    }
    
    /** Sets the value of the 'lastname' field */
    public kafka.schemas.Student.Builder setLastname(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.lastname = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'lastname' field has been set */
    public boolean hasLastname() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'lastname' field */
    public kafka.schemas.Student.Builder clearLastname() {
      lastname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'age' field */
    public java.lang.Integer getAge() {
      return age;
    }
    
    /** Sets the value of the 'age' field */
    public kafka.schemas.Student.Builder setAge(int value) {
      validate(fields()[2], value);
      this.age = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'age' field has been set */
    public boolean hasAge() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'age' field */
    public kafka.schemas.Student.Builder clearAge() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'section' field */
    public java.lang.CharSequence getSection() {
      return section;
    }
    
    /** Sets the value of the 'section' field */
    public kafka.schemas.Student.Builder setSection(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.section = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'section' field has been set */
    public boolean hasSection() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'section' field */
    public kafka.schemas.Student.Builder clearSection() {
      section = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Student build() {
      try {
        Student record = new Student();
        record.firstname = fieldSetFlags()[0] ? this.firstname : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.lastname = fieldSetFlags()[1] ? this.lastname : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.age = fieldSetFlags()[2] ? this.age : (java.lang.Integer) defaultValue(fields()[2]);
        record.section = fieldSetFlags()[3] ? this.section : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
